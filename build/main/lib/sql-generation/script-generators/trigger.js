import { commands } from '../language/plsql/index.js';
import { DROP_TEMPLATE, TRIGGER_TEMPLATE } from '../language/plsql/template/index.js';
export const createScript = (triggerObject) => {
    const { name = '', schemaName = '', replace = '', event = '', before = false, forEachRow = false, enabled = false, condition = '', declarations = [], executionBody = [], exceptionBody = [], tableName = '', } = triggerObject;
    const triggerName = schemaName ? `${schemaName}.${name}` : name;
    const replaceValue = replace ? `${commands.or} ${commands.replace}` : '';
    const triggerEvent = `${before ? commands.before : commands.after} ${event}`;
    const forEachRowClause = forEachRow
        ? `${commands.for} ${commands.each} ${commands.row}`
        : '';
    const statusClause = enabled ? `${commands.enable}` : `${commands.disable}`;
    const conditionClause = condition ? `${commands.when} ${condition}` : '';
    const declarationClause = declarations.length > 0 ? `${commands.declare} ${declarations.join(';\n')}` : '';
    return TRIGGER_TEMPLATE.replace('<replace>', replaceValue)
        .replaceAll('<object_name>', triggerName)
        .replace('<table_name>', tableName)
        .replace('<trigger_event>', triggerEvent)
        .replace('<each_row>', forEachRowClause)
        .replace('<status>', statusClause)
        .replace('<condition>', conditionClause)
        .replace('<declarations>', declarationClause)
        .replace('<execution_body>', executionBody.join(';\n'))
        .replace('<exception_body>', exceptionBody.join(';\n'));
};
export const dropScript = (triggerObject) => {
    const { name = '', schemaName = '' } = triggerObject;
    const triggerName = schemaName ? `${schemaName}.${name}` : name;
    return DROP_TEMPLATE.replace('<database_object>', commands.trigger).replace('<object_name>', triggerName);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJpZ2dlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvc3FsLWdlbmVyYXRpb24vc2NyaXB0LWdlbmVyYXRvcnMvdHJpZ2dlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBR3RGLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxDQUFDLGFBQXNCLEVBQVUsRUFBRTtJQUM3RCxNQUFNLEVBQ0osSUFBSSxHQUFHLEVBQUUsRUFDVCxVQUFVLEdBQUcsRUFBRSxFQUNmLE9BQU8sR0FBRyxFQUFFLEVBQ1osS0FBSyxHQUFHLEVBQUUsRUFDVixNQUFNLEdBQUcsS0FBSyxFQUNkLFVBQVUsR0FBRyxLQUFLLEVBQ2xCLE9BQU8sR0FBRyxLQUFLLEVBQ2YsU0FBUyxHQUFHLEVBQUUsRUFDZCxZQUFZLEdBQUcsRUFBRSxFQUNqQixhQUFhLEdBQUcsRUFBRSxFQUNsQixhQUFhLEdBQUcsRUFBRSxFQUNsQixTQUFTLEdBQUcsRUFBRSxHQUNmLEdBQUcsYUFBYSxDQUFDO0lBRWxCLE1BQU0sV0FBVyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUNoRSxNQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLEVBQUUsSUFBSSxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUN6RSxNQUFNLFlBQVksR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssSUFBSSxLQUFLLEVBQUUsQ0FBQztJQUM3RSxNQUFNLGdCQUFnQixHQUFHLFVBQVU7UUFDakMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLEdBQUcsSUFBSSxRQUFRLENBQUMsSUFBSSxJQUFJLFFBQVEsQ0FBQyxHQUFHLEVBQUU7UUFDcEQsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUNQLE1BQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQzVFLE1BQU0sZUFBZSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsSUFBSSxJQUFJLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDekUsTUFBTSxpQkFBaUIsR0FBRyxZQUFZLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsT0FBTyxJQUFJLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBRTNHLE9BQU8sZ0JBQWdCLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxZQUFZLENBQUM7U0FDdkQsVUFBVSxDQUFDLGVBQWUsRUFBRSxXQUFXLENBQUM7U0FDeEMsT0FBTyxDQUFDLGNBQWMsRUFBRSxTQUFTLENBQUM7U0FDbEMsT0FBTyxDQUFDLGlCQUFpQixFQUFFLFlBQVksQ0FBQztTQUN4QyxPQUFPLENBQUMsWUFBWSxFQUFFLGdCQUFnQixDQUFDO1NBQ3ZDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsWUFBWSxDQUFDO1NBQ2pDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsZUFBZSxDQUFDO1NBQ3ZDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxpQkFBaUIsQ0FBQztTQUM1QyxPQUFPLENBQUMsa0JBQWtCLEVBQUUsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN0RCxPQUFPLENBQUMsa0JBQWtCLEVBQUUsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQzVELENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxDQUFDLGFBQXNCLEVBQVUsRUFBRTtJQUMzRCxNQUFNLEVBQUUsSUFBSSxHQUFHLEVBQUUsRUFBRSxVQUFVLEdBQUcsRUFBRSxFQUFFLEdBQUcsYUFBYSxDQUFDO0lBQ3JELE1BQU0sV0FBVyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUVoRSxPQUFPLGFBQWEsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLEVBQUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FDekUsZUFBZSxFQUNmLFdBQVcsQ0FDWixDQUFDO0FBQ0osQ0FBQyxDQUFDIn0=