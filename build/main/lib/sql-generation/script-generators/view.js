import { commands } from '../language/plsql/index.js';
import { DROP_TEMPLATE, VIEW_TEMPLATE, } from '../language/plsql/template/index.js';
import { createScript as createGrantScript, revokeScript as revokeGrantScript, } from './grant.js';
export const createScript = (viewObject) => {
    const { name = '', schemaName = '', columns = [], grants = [], conditions = '', } = viewObject;
    const viewName = schemaName ? `${schemaName}.${name}` : name;
    const columnsToSelect = generateColumnsClause(columns);
    const fromClause = generateFromClause(columns);
    const grantScripts = grants.map(createGrantScript);
    const viewScript = VIEW_TEMPLATE.replace('<object_name>', viewName)
        .replace('<columns>', columnsToSelect)
        .replace('<tables>', fromClause)
        .replace('<conditions>', conditions);
    return `${viewScript}\n\n${grantScripts.join('\n\n')}`;
};
const generateColumnsClause = (selectColumns) => {
    const columns = [];
    for (const { name, tableName } of selectColumns) {
        const column = `${tableName}.${name}`;
        columns.push(column);
    }
    return columns.join(', ');
};
const generateFromClause = (selectColumns) => {
    let fromClause = '';
    for (const column of selectColumns) {
        const { tableName = '', joinType = '', joinCondition = '', joinTable = '', } = column;
        if (tableName && !fromClause.includes(tableName)) {
            fromClause += `${tableName} `;
            if (joinTable && !fromClause.includes(joinTable)) {
                fromClause += `${joinType} ${joinTable} ${commands.on} ${joinCondition}, `;
            }
            fromClause += ', ';
        }
    }
    return fromClause.slice(0, -2);
};
export const dropScript = (viewObject) => {
    const { name = '', schemaName = '', grants = [] } = viewObject;
    const viewName = schemaName ? `${schemaName}.${name}` : name;
    const dropView = DROP_TEMPLATE.replace('<database_object>', commands.view).replace('<object_name>', viewName);
    const revokeGrants = grants.map(revokeGrantScript);
    return `${dropView}\n\n${revokeGrants.join('\n\n')}`;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlldy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvc3FsLWdlbmVyYXRpb24vc2NyaXB0LWdlbmVyYXRvcnMvdmlldy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDdEQsT0FBTyxFQUNMLGFBQWEsRUFDYixhQUFhLEdBQ2QsTUFBTSxxQ0FBcUMsQ0FBQztBQUc3QyxPQUFPLEVBQ0wsWUFBWSxJQUFJLGlCQUFpQixFQUNqQyxZQUFZLElBQUksaUJBQWlCLEdBQ2xDLE1BQU0sWUFBWSxDQUFDO0FBRXBCLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxDQUFDLFVBQWdCLEVBQVUsRUFBRTtJQUN2RCxNQUFNLEVBQ0osSUFBSSxHQUFHLEVBQUUsRUFDVCxVQUFVLEdBQUcsRUFBRSxFQUNmLE9BQU8sR0FBRyxFQUFFLEVBQ1osTUFBTSxHQUFHLEVBQUUsRUFDWCxVQUFVLEdBQUcsRUFBRSxHQUNoQixHQUFHLFVBQVUsQ0FBQztJQUVmLE1BQU0sUUFBUSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUM3RCxNQUFNLGVBQWUsR0FBRyxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN2RCxNQUFNLFVBQVUsR0FBRyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMvQyxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFFbkQsTUFBTSxVQUFVLEdBQUcsYUFBYSxDQUFDLE9BQU8sQ0FBQyxlQUFlLEVBQUUsUUFBUSxDQUFDO1NBQ2hFLE9BQU8sQ0FBQyxXQUFXLEVBQUUsZUFBZSxDQUFDO1NBQ3JDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDO1NBQy9CLE9BQU8sQ0FBQyxjQUFjLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFFdkMsT0FBTyxHQUFHLFVBQVUsT0FBTyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7QUFDekQsQ0FBQyxDQUFDO0FBRUYsTUFBTSxxQkFBcUIsR0FBRyxDQUFDLGFBQTZCLEVBQVUsRUFBRTtJQUN0RSxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUM7SUFFbkIsS0FBSyxNQUFNLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxJQUFJLGFBQWEsRUFBRTtRQUMvQyxNQUFNLE1BQU0sR0FBRyxHQUFHLFNBQVMsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUN0QyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ3RCO0lBRUQsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzVCLENBQUMsQ0FBQztBQUVGLE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxhQUE2QixFQUFVLEVBQUU7SUFDbkUsSUFBSSxVQUFVLEdBQUcsRUFBRSxDQUFDO0lBRXBCLEtBQUssTUFBTSxNQUFNLElBQUksYUFBYSxFQUFFO1FBQ2xDLE1BQU0sRUFDSixTQUFTLEdBQUcsRUFBRSxFQUNkLFFBQVEsR0FBRyxFQUFFLEVBQ2IsYUFBYSxHQUFHLEVBQUUsRUFDbEIsU0FBUyxHQUFHLEVBQUUsR0FDZixHQUFHLE1BQU0sQ0FBQztRQUNYLElBQUksU0FBUyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUNoRCxVQUFVLElBQUksR0FBRyxTQUFTLEdBQUcsQ0FBQztZQUM5QixJQUFJLFNBQVMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQUU7Z0JBQ2hELFVBQVUsSUFBSSxHQUFHLFFBQVEsSUFBSSxTQUFTLElBQUksUUFBUSxDQUFDLEVBQUUsSUFBSSxhQUFhLElBQUksQ0FBQzthQUM1RTtZQUNELFVBQVUsSUFBSSxJQUFJLENBQUM7U0FDcEI7S0FDRjtJQUVELE9BQU8sVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqQyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxVQUFnQixFQUFVLEVBQUU7SUFDckQsTUFBTSxFQUFFLElBQUksR0FBRyxFQUFFLEVBQUUsVUFBVSxHQUFHLEVBQUUsRUFBRSxNQUFNLEdBQUcsRUFBRSxFQUFFLEdBQUcsVUFBVSxDQUFDO0lBQy9ELE1BQU0sUUFBUSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUU3RCxNQUFNLFFBQVEsR0FBRyxhQUFhLENBQUMsT0FBTyxDQUNwQyxtQkFBbUIsRUFDbkIsUUFBUSxDQUFDLElBQUksQ0FDZCxDQUFDLE9BQU8sQ0FBQyxlQUFlLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFFckMsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBRW5ELE9BQU8sR0FBRyxRQUFRLE9BQU8sWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO0FBQ3ZELENBQUMsQ0FBQyJ9